-> class is just a template that do  not really exist. instance is its physical incarnation which we call object. 

-> instance variable is the variable present inside the instance of class

-> a dot operater (.) is used to access instance variables and functions of a class. It is also called as seprater

->The 'new' keyword dynamically allocates(that is, allocates at run time)memory for an object & returns a reference to it. This reference is, more or less, the address in memory of the object allocated by new. This reference is then stored in the variable. Thus, in Java, all class objects must be dynamically allocated.

-> static variables or functions do not belong to obj. They can be used even if obj is not created. so if i make a counter that keeps track of how many objs are created i will make a static variable inside the class and increment it every time the constructer is called.

then to check how many obj were created i will just access that varible using classname or obj name ex -> class_name.counter or obj.counter.

-> static data members can only have static data members. because main is static we can only use static class or methods inside it. 

-> To use non static things in main what you can do is make the obj of class you are inside and add obj.staticthing while using it.

public class Main{

	public static void main(String [] args){
		
		Main obj = new Main();
		obj.greet(); // here greet cannot be used as it is not static and is being inside main method which is static. So I made obj of Main class	

		}

		void greet(){
		
		System.out,println("Hello");

		}

}

-> main method is static because to use any thing that is inside the class we have to make its obj first. and because static thing do not belong to obj nut to class main method can be used.

-> A static method can call only other static methods and cannot call a non-static method from it. A static method can be accessed directly by the class name and doesnâ€™t need any object

-> A static class can have two different instances because it is a class. but if we declare some variable inside the static class as static it will become common for all

public class staticKeword {
    // class Test  // ERROR
    static class Test{
        String name;

        public Test(String name) {
            this.name = name;
        }
    }

    public static void main(String[] args) {
        Test a = new Test("prateek");

        Test b = new Test("anurag");

        System.out.println(a.name); // prateek
        System.out.println(b.name); // anurag
    }
}

-> if see clearly it is class in side a class so now the inner class is static i.e. for creation of its object it does not require refernce of its outer class.


-> how System.out.println works => System is a class in side which a variable is created of type PrintStream => inside PrintStream there is function called println() => this function converts anything provided to it in string using toString and puts that to console

-> singleton class is a class that can have only one instance, even if you try to create its new instance it will point to the previous instance that was created. for doing this you must make the constructor private and make variable that store the intance and make function that eill be called to make the instance. If instance is not createad it will create and new instance and will return that and iif it is created it will return the previous instance;

-> copy constructor is constructor that take previous insance as input.

 Box(Box box){
        this.l = box.l;
        this.h = box.h;
        this.w = box.w;
    }




public static List<List<Integer>> getSubsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());  

        for (int num : nums) {
            int size = result.size();
            for (int i = 0; i < size; i++) {
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(num);
                result.add(subset);
            }
        }

        return result;
    }
